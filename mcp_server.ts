#!/usr/bin/env node

import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { 
  CallToolRequestSchema,
  ListToolsRequestSchema 
} from "@modelcontextprotocol/sdk/types.js";
import { fileURLToPath } from "url";
import path from "path";
import { readFileSync, existsSync } from "fs";
import Fuse from "fuse.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Interfaces –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–º–µ—Ç–æ–∫ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π index.json)
interface ObsidianNote {
  path: string;
  content_preview: string;
  vector?: number[];
  id?: string;
  title?: string;
  description?: string;
  content?: string;
  lastModified?: string;
  tags?: string[];
  links?: string[];
  size?: number;
  fullPath?: string; // –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
}

// üîç –†–ê–°–®–ò–†–ï–ù–ù–´–ï –û–ü–ï–†–ê–¢–û–†–´ –ü–û–ò–°–ö–ê (–∫–∞–∫ –≤ Google!)
interface ParsedQuery {
  terms: string[];           // –û–±—ã—á–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
  exactPhrases: string[];    // "—Ç–æ—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã" 
  requiredTerms: string[];   // +–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ
  excludedTerms: string[];   // -–∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ
  fieldQueries: {field: string, value: string}[]; // title:–∑–Ω–∞—á–µ–Ω–∏–µ
  operators: {type: 'AND' | 'OR', terms: string[]}[]; // AND/OR –≥—Ä—É–ø–ø—ã
}

// üìä –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–û –¢–ò–ü–ê–ú
enum NoteCategory {
  DOCUMENTATION = 'üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
  PROJECT_SPEC = 'üìã –¢–ó –∏ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏', 
  TUTORIAL = 'üéì –û–±—É—á–µ–Ω–∏–µ',
  CODE_SAMPLES = 'üíª –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞',
  TODO_TASKS = '‚úÖ –ó–∞–¥–∞—á–∏ –∏ TODO',
  PERSONAL_NOTES = 'üìù –õ–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏',
  REFERENCE = 'üîñ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏',
  OTHER = 'üìÑ –ü—Ä–æ—á–µ–µ'
}

class QueryParser {
  static parse(query: string): ParsedQuery {
    const result: ParsedQuery = {
      terms: [],
      exactPhrases: [],
      requiredTerms: [],
      excludedTerms: [],
      fieldQueries: [],
      operators: []
    };

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    const phraseRegex = /"([^"]+)"/g;
    let match;
    while ((match = phraseRegex.exec(query)) !== null) {
      result.exactPhrases.push(match[1].toLowerCase());
      query = query.replace(match[0], ''); // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Ñ—Ä–∞–∑—É
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—è–º (title:–∑–Ω–∞—á–µ–Ω–∏–µ, path:–∑–Ω–∞—á–µ–Ω–∏–µ, tags:–∑–Ω–∞—á–µ–Ω–∏–µ)
    const fieldRegex = /(\w+):(\S+)/g;
    while ((match = fieldRegex.exec(query)) !== null) {
      result.fieldQueries.push({
        field: match[1].toLowerCase(),
        value: match[2].toLowerCase()
      });
      query = query.replace(match[0], ''); // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —á–∞—Å—Ç—å
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª–æ–≤–∞
    const words = query.split(/\s+/).filter(word => word.trim().length > 0);

    for (const word of words) {
      const trimmed = word.trim().toLowerCase();
      if (!trimmed) continue;

      if (trimmed.startsWith('+')) {
        // +–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
        const term = trimmed.substring(1);
        if (term.length > 0) result.requiredTerms.push(term);
      } else if (trimmed.startsWith('-')) {
        // -–∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
        const term = trimmed.substring(1);
        if (term.length > 0) result.excludedTerms.push(term);
      } else if (trimmed === 'and' || trimmed === 'or') {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã, –æ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        continue;
      } else {
        // –û–±—ã—á–Ω–æ–µ —Å–ª–æ–≤–æ
        result.terms.push(trimmed);
      }
    }

    return result;
  }
}

class NoteCategorizer {
  static categorize(note: ObsidianNote): NoteCategory {
    const path = note.path.toLowerCase();
    const title = (note.title || '').toLowerCase();
    const content = (note.content || note.content_preview || '').toLowerCase();

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –ø—É—Ç–∏
    if (path.includes('–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è') || path.includes('docs/')) {
      return NoteCategory.DOCUMENTATION;
    }
    if (path.includes('—Ç–∑ ') || path.includes('spec') || path.includes('requirements')) {
      return NoteCategory.PROJECT_SPEC;
    }
    if (path.includes('tutorial') || path.includes('–æ–±—É—á–µ–Ω–∏–µ') || path.includes('guide')) {
      return NoteCategory.TUTORIAL;
    }
    if (path.includes('examples') || path.includes('samples') || path.includes('–ø—Ä–∏–º–µ—Ä—ã')) {
      return NoteCategory.CODE_SAMPLES;
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
    if (title.includes('todo') || title.includes('–∑–∞–¥–∞—á') || content.includes('- [ ]') || content.includes('‚òê')) {
      return NoteCategory.TODO_TASKS;
    }
    if (title.includes('readme') || title.includes('–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è') || content.includes('# –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è')) {
      return NoteCategory.DOCUMENTATION;
    }
    if (title.includes('—Ç–∑') || title.includes('—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ') || content.includes('## —Ç–∑')) {
      return NoteCategory.PROJECT_SPEC;
    }
    if (content.includes('```') && (content.includes('function') || content.includes('class') || content.includes('const'))) {
      return NoteCategory.CODE_SAMPLES;
    }
    if (title.includes('—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫') || content.includes('api reference') || content.includes('–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è api')) {
      return NoteCategory.REFERENCE;
    }

    return NoteCategory.OTHER;
  }
}

interface SearchResult {
  id: string;
  title: string;
  description: string;
  path: string;
  lastModified: string;
  score: number;
  type: string;
  content_preview: string;
  tags?: string[];
  links?: string[];
  confidence: string;
}

const DEFAULT_LIMIT = 20; // üéØ –£–≤–µ–ª–∏—á–∏–ª–∏ –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–Ω–¥–µ–∫—Å–∞
const SCRIPT_DIR = path.dirname(__filename);
const PLUGIN_ROOT = path.join(SCRIPT_DIR, '..');

function findIndexPath(): string {
  const indexPath = path.join(PLUGIN_ROOT, 'index.json');
  console.error(`üîç Looking for index.json at: ${indexPath}\n`);
  console.error(`üîç Script dir: ${SCRIPT_DIR}`);
  console.error(`üîç Plugin root: ${PLUGIN_ROOT}`);
  return indexPath;
}

// Singleton instance –∑–∞—â–∏—Ç–∞

// –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
let serverInstance: ObsidianMCPServer | null = null;

class ObsidianMCPServer {
  private indexData: ObsidianNote[] = [];
  private synonyms: Record<string, string[]> = {};
  private categories: Record<string, string[]> = {};
  private isLoaded: boolean = false;
  private vaultPath: string = ''; // –ü—É—Ç—å –∫ vault –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω—ã–º —Ñ–∞–π–ª–∞–º
  private fuse: Fuse<ObsidianNote> | null = null; // Fuse.js –ø–æ–∏—Å–∫–æ–≤–∏–∫
  
  // üöÄ –£–ú–ù–û–ï –ö–≠–®–ò–†–û–í–ê–ù–ò–ï
  private searchCache = new Map<string, {results: SearchResult[], timestamp: number, hitCount: number}>();
  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  private readonly MAX_CACHE_SIZE = 100; // –ú–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –∫—ç—à–µ
  
  // üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê
  private searchStats = {
    totalSearches: 0,
    cacheHits: 0,
    avgSearchTime: 0,
    popularQueries: new Map<string, number>(),
    popularWords: new Map<string, number>(),
    searchesByHour: new Array(24).fill(0),
    categoriesFound: new Map<string, number>(),
    advancedOperatorsUsed: 0,
    linkedNotesFound: 0
  };

  constructor() {
    this.synonyms = this._loadSynonyms();
    this.categories = this._initCategories();
    this.vaultPath = this.findVaultPath();
  }

  loadIndexSync() {
    if (this.isLoaded) return;
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º index –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    this.loadIndex().catch(console.error);
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ vault
  private findVaultPath(): string {
    // –ü—É—Ç—å –æ—Ç plugin root –¥–æ vault root
    // /path/to/vault/.obsidian/plugins/obsidian-mcp-plugin -> /path/to/vault/
    const vaultPath = path.join(PLUGIN_ROOT, '../../');
    const normalizedPath = path.resolve(vaultPath);
    console.error(`üìÇ Vault path detected: ${normalizedPath}/`);
    console.error(`üìÇ Plugin root dir: ${PLUGIN_ROOT}`);
    return normalizedPath;
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å –∑–∞–º–µ—Ç–æ–∫
  async loadIndex(): Promise<void> {
    try {
      const INDEX_PATH = findIndexPath();
      console.error(`üîç Attempting to load index from: ${INDEX_PATH}\n`);
      
      if (existsSync(INDEX_PATH)) {
        const rawData = JSON.parse(readFileSync(INDEX_PATH, 'utf-8'));
        console.error(`üîç Raw data contains ${rawData.length} items`);
        console.error(`üîç First item keys:`, Object.keys(rawData[0] || {}));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if (!Array.isArray(rawData)) {
          throw new Error('Index data is not an array');
        }
        
        this.indexData = rawData.map((item, index) => ({
          ...item,
          id: item.id || `note_${index}`,
          title: item.title || path.basename(item.path, '.md'),
          description: item.description || item.content_preview?.substring(0, 150) || '',
          lastModified: item.lastModified || new Date().toISOString(),
          tags: item.tags || [],
          links: item.links || [],
          fullPath: path.join(this.vaultPath, item.path) // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        }));
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
        await this.loadFullContent();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Fuse.js –ø–æ–∏—Å–∫
        this.initializeFuse();
        
        this.isLoaded = true;
        
        // üöÄ –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞
        this.clearCache();
        
        console.error(`‚úÖ Successfully loaded ${this.indexData.length} notes from index`);
        console.error(`üöÄ Fuse.js search engine initialized with full content`);
      } else {
        console.error(`‚ùå Index file not found: ${INDEX_PATH}`);
        console.error(`üí° Make sure your Obsidian notes are properly indexed`);
      }
    } catch (error) {
      console.error(`‚ùå Error loading index:`, error);
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
  private async loadFullContent(): Promise<void> {
    console.error(`üìÑ Loading full content for ${this.indexData.length} notes...`);
    
    for (const note of this.indexData) {
      if (note.fullPath && existsSync(note.fullPath)) {
        try {
          note.content = readFileSync(note.fullPath, 'utf-8');
        } catch (error) {
          console.error(`‚ùå Failed to read ${note.fullPath}:`, error);
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º preview –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª
          note.content = note.content_preview || '';
        }
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º preview –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        note.content = note.content_preview || '';
      }
    }
    
    console.error(`üìö Loaded full content for ${this.indexData.length}/${this.indexData.length} notes`);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Fuse.js –¥–ª—è –º–æ—â–Ω–æ–≥–æ fuzzy –ø–æ–∏—Å–∫–∞
  private initializeFuse(): void {
    const fuseOptions = {
      keys: [
        { name: 'title', weight: 0.5 },           // üéØ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –µ—â–µ –≤–∞–∂–Ω–µ–µ (–±—ã–ª–æ 0.4)
        { name: 'path', weight: 0.2 },            // –ü—É—Ç—å —Ç–æ–∂–µ –≤–∞–∂–µ–Ω
        { name: 'description', weight: 0.1 },     // üéØ –û–ø–∏—Å–∞–Ω–∏–µ –º–µ–Ω–µ–µ –≤–∞–∂–Ω–æ (–±—ã–ª–æ 0.15)
        { name: 'content', weight: 0.15 },        // üéØ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–Ω–µ–µ –≤–∞–∂–Ω–æ (–±—ã–ª–æ 0.2)
        { name: 'tags', weight: 0.05 }            // –¢–µ–≥–∏
      ],
      threshold: 0.25,       // üéØ –§–ò–ù–ê–õ: —Ä–∞–∑—É–º–Ω–æ —Å—Ç—Ä–æ–≥–∏–π (–Ω–∞–π–¥–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ, –Ω–æ –Ω–µ –≤—Å—ë –ø–æ–¥—Ä—è–¥)
      distance: 20,          // üéØ –§–ò–ù–ê–õ: —Å—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
      minMatchCharLength: 3, // üéØ –§–ò–ù–ê–õ: –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞
      useExtendedSearch: true, // –í–∫–ª—é—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–æ–∏—Å–∫–∞
      ignoreLocation: true   // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
    };

    this.fuse = new Fuse(this.indexData, fuseOptions);
    console.error(`üîß Fuse.js initialized with ${this.indexData.length} searchable notes`);
  }

  // –†–∞—Å—à–∏—Ä—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
  private expandQueryWithSynonyms(query: string): string[] {
    const expandedQueries = [query.toLowerCase()];
    const queryLower = query.toLowerCase();

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    for (const [key, synonyms] of Object.entries(this.synonyms)) {
      if (key === queryLower || synonyms.some(syn => queryLower.includes(syn))) {
        expandedQueries.push(key);
        expandedQueries.push(...synonyms);
      }
    }

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    return [...new Set(expandedQueries)];
  }

  // üéØ –ù–û–í–ê–Ø –§–ò–ß–ê: –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ!
  private highlightMatches(text: string, query: string): string {
    if (!text || !query) return text;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    const queryWords = this.extractQueryWords(query);
    
    let highlightedText = text;
    
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
    for (const word of queryWords) {
      if (word.length < 2) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
      
      const regex = new RegExp(`(${this.escapeRegex(word)})`, 'gi');
      highlightedText = highlightedText.replace(regex, '**$1**'); // –ñ–∏—Ä–Ω—ã–º –≤—ã–¥–µ–ª—è–µ–º
    }

    return highlightedText;
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
  private extractQueryWords(query: string): string[] {
    const words = query.toLowerCase()
      .split(/[\s\-_.,;:!?()[\]{}"']+/) // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
      .filter(word => word.length >= 2)  // –¢–æ–ª—å–∫–æ —Å–ª–æ–≤–∞ –æ—Ç 2 —Å–∏–º–≤–æ–ª–æ–≤
      .filter(word => !/^\d+$/.test(word)); // –ò—Å–∫–ª—é—á–∞–µ–º —á–∏—Å—Ç–æ —á–∏—Å–ª–æ–≤—ã–µ

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    const expandedWords = [...words];
    for (const word of words) {
      for (const [key, synonyms] of Object.entries(this.synonyms)) {
        if (key === word || synonyms.includes(word)) {
          expandedWords.push(key, ...synonyms);
        }
      }
    }

    return [...new Set(expandedWords)]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  }

  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è regex
  private escapeRegex(str: string): string {
    return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  }

  // üîç –£–º–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
  private extractRelevantSnippet(text: string, query: string, maxLength: number = 300): string {
    if (!text || text.length <= maxLength) return text;

    const queryWords = this.extractQueryWords(query);
    let bestPosition = 0;
    let maxMatches = 0;

    // –ò—â–µ–º —É—á–∞—Å—Ç–æ–∫ —Ç–µ–∫—Å—Ç–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    const windowSize = maxLength;
    for (let i = 0; i <= text.length - windowSize; i += Math.floor(windowSize / 3)) {
      const window = text.substring(i, i + windowSize).toLowerCase();
      let matches = 0;
      
      for (const word of queryWords) {
        const regex = new RegExp(this.escapeRegex(word), 'gi');
        const wordMatches = window.match(regex);
        if (wordMatches) matches += wordMatches.length;
      }
      
      if (matches > maxMatches) {
        maxMatches = matches;
        bestPosition = i;
      }
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ª—É—á—à–∏–π —É—á–∞—Å—Ç–æ–∫
    let snippet = text.substring(bestPosition, bestPosition + maxLength);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–æ–µ—Ç–æ—á–∏–µ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü
    if (bestPosition > 0) snippet = '...' + snippet;
    if (bestPosition + maxLength < text.length) snippet = snippet + '...';
    
    return snippet;
  }

  // üîó –ü–û–ò–°–ö –ü–û –°–í–Ø–ó–Ø–ú –ú–ï–ñ–î–£ –ó–ê–ú–ï–¢–ö–ê–ú–ò!
  private findLinkedNotes(noteId: string, maxDepth: number = 2): ObsidianNote[] {
    if (!this.indexData || maxDepth <= 0) return [];

    const visited = new Set<string>();
    const linkedNotes: ObsidianNote[] = [];
    const queue: {note: ObsidianNote, depth: number}[] = [];

    // –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ö–æ–¥–Ω—É—é –∑–∞–º–µ—Ç–∫—É
    const startNote = this.indexData.find(note => 
      note.id === noteId || note.path === noteId || note.title === noteId
    );
    
    if (!startNote) return [];
    
    queue.push({note: startNote, depth: 0});
    visited.add(startNote.id || startNote.path);

    while (queue.length > 0) {
      const {note, depth} = queue.shift()!;
      
      if (depth > 0) {
        linkedNotes.push(note);
      }

      if (depth < maxDepth && note.links) {
        // –ò—â–µ–º –∑–∞–º–µ—Ç–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è
        for (const link of note.links) {
          if (!visited.has(link)) {
            const linkedNote = this.indexData.find(n => 
              n.id === link || n.path === link || n.title === link
            );
            if (linkedNote) {
              visited.add(linkedNote.id || linkedNote.path);
              queue.push({note: linkedNote, depth: depth + 1});
            }
          }
        }
      }

      // –ò—â–µ–º –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ —Ç–µ–∫—É—â—É—é
      if (depth < maxDepth) {
        const backlinks = this.indexData.filter(n => 
          n.links && n.links.some(link => 
            link === (note.id || note.path || note.title)
          ) && !visited.has(n.id || n.path)
        );
        
        for (const backlink of backlinks) {
          visited.add(backlink.id || backlink.path);
          queue.push({note: backlink, depth: depth + 1});
        }
      }
    }

    return linkedNotes;
  }

  // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å —É—á–µ—Ç–æ–º —Å–≤—è–∑–µ–π
  private searchWithLinks(query: string, baseResults: SearchResult[], includeLinked: boolean = true): SearchResult[] {
    if (!includeLinked || baseResults.length === 0) return baseResults;

    // üéØ –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê: —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ä–æ—à–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const highQualityResults = baseResults.filter(r => r.score < 0.2); // üéØ –§–ò–ù–ê–õ: —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (highQualityResults.length === 0) {
      console.error(`üîó Skipping linked notes: no high-quality base results found`);
      return baseResults; // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–ª–∞–±—ã–µ
    }

    const enhancedResults: SearchResult[] = [...baseResults];
    const addedIds = new Set(baseResults.map(r => r.id));

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
    for (const result of baseResults.slice(0, 2)) { // üéØ –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-2 (–±—ã–ª–æ 5)
      const linkedNotes = this.findLinkedNotes(result.id, 1); // –ì–ª—É–±–∏–Ω–∞ 1 —É—Ä–æ–≤–µ–Ω—å
      
      for (const linkedNote of linkedNotes.slice(0, 1)) { // üéØ –ú–∞–∫—Å–∏–º—É–º 1 —Å–≤—è–∑–∞–Ω–Ω–∞—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–±—ã–ª–æ 3)
        const linkedId = linkedNote.id || linkedNote.path;
        if (!addedIds.has(linkedId)) {
          addedIds.add(linkedId);
          
          const linkedResult: SearchResult = {
            id: linkedId,
            title: `üîó ${this.highlightMatches(linkedNote.title || 'Untitled', query)}`,
            description: `–°–≤—è–∑–∞–Ω–æ —Å: "${result.title.replace(/\*\*/g, '')}" | ${this.highlightMatches(linkedNote.description || '', query)}`,
            path: linkedNote.path,
            lastModified: linkedNote.lastModified || '',
            score: result.score * 0.7, // –ü–æ–Ω–∏–∂–∞–µ–º score –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
            type: 'linked_note',
            content_preview: this.highlightMatches(this.extractRelevantSnippet(linkedNote.content || '', query, 200), query),
            tags: linkedNote.tags,
            links: linkedNote.links,
            confidence: 'medium'
          };
          
          enhancedResults.push(linkedResult);
        }
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ, –ø–æ—Ç–æ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ score
    return enhancedResults.sort((a, b) => {
      if (a.type === 'fuse_match' && b.type === 'linked_note') return -1;
      if (a.type === 'linked_note' && b.type === 'fuse_match') return 1;
      return b.score - a.score;
    });
  }

  // üîß –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  private debugAdvancedFilter(note: ObsidianNote, parsedQuery: ParsedQuery): boolean {
    const searchableText = [
      note.title || '',
      note.description || '',
      note.content || note.content_preview || '',
      note.path,
      (note.tags || []).join(' ')
    ].join(' ').toLowerCase();

    console.error(`üîç Searchable text sample: "${searchableText.substring(0, 100)}..."`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    for (const phrase of parsedQuery.exactPhrases) {
      const found = searchableText.includes(phrase);
      console.error(`üîç Exact phrase "${phrase}": ${found}`);
      if (!found) return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
    for (const required of parsedQuery.requiredTerms) {
      const found = searchableText.includes(required);
      console.error(`üîç Required term "${required}": ${found}`);
      if (!found) return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
    for (const excluded of parsedQuery.excludedTerms) {
      const found = searchableText.includes(excluded);
      console.error(`üîç Excluded term "${excluded}": ${found} (should be false)`);
      if (found) return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—è–º
    for (const fieldQuery of parsedQuery.fieldQueries) {
      let fieldValue = '';
      switch (fieldQuery.field) {
        case 'title':
          fieldValue = (note.title || '').toLowerCase();
          break;
        case 'path':
          fieldValue = note.path.toLowerCase();
          break;
        case 'tags':
          fieldValue = (note.tags || []).join(' ').toLowerCase();
          break;
        case 'content':
          fieldValue = (note.content || note.content_preview || '').toLowerCase();
          break;
      }
      
      const found = fieldValue.includes(fieldQuery.value);
      console.error(`üîç Field ${fieldQuery.field}:"${fieldQuery.value}": ${found} (field value: "${fieldValue.substring(0, 50)}...")`);
      if (!found) return false;
    }

    return true;
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
  private filterByAdvancedQuery(results: SearchResult[], parsedQuery: ParsedQuery, originalNotes: ObsidianNote[]): SearchResult[] {
    return results.filter(result => {
      const note = originalNotes.find(n => (n.id || n.path) === result.id);
      if (!note) return false;

      const searchableText = [
        note.title || '',
        note.description || '',
        note.content || note.content_preview || '',
        note.path,
        (note.tags || []).join(' ')
      ].join(' ').toLowerCase();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã
      for (const phrase of parsedQuery.exactPhrases) {
        if (!searchableText.includes(phrase)) return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
      for (const required of parsedQuery.requiredTerms) {
        if (!searchableText.includes(required)) return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
      for (const excluded of parsedQuery.excludedTerms) {
        if (searchableText.includes(excluded)) return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—è–º
      for (const fieldQuery of parsedQuery.fieldQueries) {
        let fieldValue = '';
        switch (fieldQuery.field) {
          case 'title':
            fieldValue = (note.title || '').toLowerCase();
            break;
          case 'path':
            fieldValue = note.path.toLowerCase();
            break;
          case 'tags':
            fieldValue = (note.tags || []).join(' ').toLowerCase();
            break;
          case 'content':
            fieldValue = (note.content || note.content_preview || '').toLowerCase();
            break;
        }
        
        if (!fieldValue.includes(fieldQuery.value)) return false;
      }

      return true;
    });
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  private categorizeResults(results: SearchResult[]): Map<NoteCategory, SearchResult[]> {
    const categorized = new Map<NoteCategory, SearchResult[]>();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    Object.values(NoteCategory).forEach(category => {
      categorized.set(category, []);
    });

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for (const result of results) {
      const note = this.indexData.find(n => (n.id || n.path) === result.id);
      if (note) {
        const category = NoteCategorizer.categorize(note);
        categorized.get(category)!.push(result);
      }
    }

    return categorized;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–ë–ï–ó –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã)
  private formatCategorizedResults(categorized: Map<NoteCategory, SearchResult[]>, limit: number): SearchResult[] {
    const formatted: SearchResult[] = [];
    let totalAdded = 0;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –¢–ó –≤–∞–∂–Ω–µ–µ)
    const categoryPriority = [
      NoteCategory.DOCUMENTATION,
      NoteCategory.PROJECT_SPEC,
      NoteCategory.CODE_SAMPLES,
      NoteCategory.TUTORIAL,
      NoteCategory.REFERENCE,
      NoteCategory.TODO_TASKS,
      NoteCategory.PERSONAL_NOTES,
      NoteCategory.OTHER
    ];

    for (const category of categoryPriority) {
      const categoryResults = categorized.get(category) || [];
      if (categoryResults.length === 0) continue;

      // üéØ –£–ë–†–ê–õ–ò –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      for (const result of categoryResults) {
        if (totalAdded >= limit) break;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É (–Ω–æ –ë–ï–ó –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
        const enhancedResult = {
          ...result,
          description: `[${category}] ${result.description}`, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
          type: result.type === 'linked_note' ? 'linked_note' : 'categorized_result'
        };
        
        formatted.push(enhancedResult);
        totalAdded++;
      }

      if (totalAdded >= limit) break;
    }

    return formatted;
  }

  // üöÄ –ú–ï–¢–û–î–´ –£–ú–ù–û–ì–û –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
  private getCacheKey(query: string, limit: number): string {
    return `${query.toLowerCase().trim()}:${limit}`;
  }

  private cleanExpiredCache(): void {
    const now = Date.now();
    for (const [key, entry] of this.searchCache.entries()) {
      if (now - entry.timestamp > this.CACHE_TTL) {
        this.searchCache.delete(key);
      }
    }
  }

  private evictLeastUsedCache(): void {
    if (this.searchCache.size < this.MAX_CACHE_SIZE) return;
    
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–π
    let minHitCount = Infinity;
    let keyToEvict = '';
    
    for (const [key, entry] of this.searchCache.entries()) {
      if (entry.hitCount < minHitCount) {
        minHitCount = entry.hitCount;
        keyToEvict = key;
      }
    }
    
    if (keyToEvict) {
      this.searchCache.delete(keyToEvict);
    }
  }

  private getCachedResult(query: string, limit: number): SearchResult[] | null {
    this.cleanExpiredCache();
    
    const key = this.getCacheKey(query, limit);
    const cached = this.searchCache.get(key);
    
    if (cached) {
      const now = Date.now();
      if (now - cached.timestamp <= this.CACHE_TTL) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π
        cached.hitCount++;
        cached.timestamp = now; // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        console.error(`‚ö° Cache HIT for "${query}" (hits: ${cached.hitCount})`);
        return [...cached.results]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é
      } else {
        // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
        this.searchCache.delete(key);
      }
    }
    
    console.error(`üíæ Cache MISS for "${query}"`);
    return null;
  }

  private setCachedResult(query: string, limit: number, results: SearchResult[]): void {
    const key = this.getCacheKey(query, limit);
    
    // –û—á–∏—â–∞–µ–º –º–µ—Å—Ç–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    this.evictLeastUsedCache();
    
    this.searchCache.set(key, {
      results: [...results], // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é
      timestamp: Date.now(),
      hitCount: 1
    });
    
    console.error(`üíæ Cached results for "${query}" (cache size: ${this.searchCache.size}/${this.MAX_CACHE_SIZE})`);
  }

  // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞
  private clearCache(): void {
    this.searchCache.clear();
    console.error(`üóëÔ∏è Search cache cleared`);
  }

  // üìä –ú–ï–¢–û–î–´ –ê–ù–ê–õ–ò–¢–ò–ö–ò –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò
  private recordSearchAnalytics(query: string, searchTime: number, resultsCount: number, hasAdvancedOperators: boolean, linkedNotesCount: number, categories: Map<NoteCategory, SearchResult[]>): void {
    this.searchStats.totalSearches++;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const normalizedQuery = query.toLowerCase().trim();
    this.searchStats.popularQueries.set(normalizedQuery, (this.searchStats.popularQueries.get(normalizedQuery) || 0) + 1);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
    const words = normalizedQuery.split(/\s+/).filter(w => w.length > 2);
    for (const word of words) {
      this.searchStats.popularWords.set(word, (this.searchStats.popularWords.get(word) || 0) + 1);
    }
    
    // –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
    this.searchStats.avgSearchTime = (this.searchStats.avgSearchTime + searchTime) / 2;
    
    // –í—Ä–µ–º—è –¥–Ω—è
    const hour = new Date().getHours();
    this.searchStats.searchesByHour[hour]++;
    
    // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
    if (hasAdvancedOperators) {
      this.searchStats.advancedOperatorsUsed++;
    }
    
    // –°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
    this.searchStats.linkedNotesFound += linkedNotesCount;
    
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    for (const [category, results] of categories) {
      if (results.length > 0) {
        this.searchStats.categoriesFound.set(category, (this.searchStats.categoriesFound.get(category) || 0) + results.length);
      }
    }
  }

  private recordCacheHit(): void {
    this.searchStats.cacheHits++;
  }

  private getSearchStatistics(): string {
    const stats = this.searchStats;
    const cacheHitRate = stats.totalSearches > 0 ? ((stats.cacheHits / stats.totalSearches) * 100).toFixed(1) : '0';
    
    // –¢–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const topQueries = Array.from(stats.popularQueries.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5)
      .map(([query, count]) => `"${query}": ${count}`)
      .join(', ');
      
    // –¢–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–ª–æ–≤
    const topWords = Array.from(stats.popularWords.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .map(([word, count]) => `${word}(${count})`)
      .join(', ');
      
    // –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å
    const peakHour = stats.searchesByHour.indexOf(Math.max(...stats.searchesByHour));
    
    return `
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–ò–°–ö–ê:
üîç –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: ${stats.totalSearches}
‚ö° Cache Hit Rate: ${cacheHitRate}% (${stats.cacheHits}/${stats.totalSearches})
‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${stats.avgSearchTime.toFixed(1)}ms
üïê –ü–∏–∫–æ–≤—ã–π —á–∞—Å: ${peakHour}:00 (${stats.searchesByHour[peakHour]} –ø–æ–∏—Å–∫–æ–≤)
üîó –°–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: ${stats.linkedNotesFound}
üîç –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: ${stats.advancedOperatorsUsed} —Ä–∞–∑
üìà –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: ${topQueries || '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
üè∑Ô∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ–≤–∞: ${topWords || '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
    `.trim();
  }

  // –ò–î–ï–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö —Å Fuse.js!
  public searchNotes(query: string, limit: number = DEFAULT_LIMIT): SearchResult[] {
    if (!this.fuse || !this.indexData || this.indexData.length === 0) {
      console.error(`‚ùå Search engine not initialized`);
      return [];
    }

    // üìä –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
    const searchStartTime = Date.now();
    
    // üöÄ –ü–†–û–í–ï–†–Ø–ï–ú –ö–≠–®–ò –î–õ–Ø –ú–ì–ù–û–í–ï–ù–ù–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í!
    const cachedResults = this.getCachedResult(query, limit);
    if (cachedResults) {
      this.recordCacheHit();
      return cachedResults;
    }

    console.error(`üîç Searching: "${query}" in ${this.indexData.length} notes`);
    
    // üîç –ü–ê–†–°–ò–ú –†–ê–°–®–ò–†–ï–ù–ù–´–ï –û–ü–ï–†–ê–¢–û–†–´!
    const parsedQuery = QueryParser.parse(query);
    const hasAdvancedOperators = parsedQuery.exactPhrases.length > 0 || 
                                 parsedQuery.requiredTerms.length > 0 || 
                                 parsedQuery.excludedTerms.length > 0 || 
                                 parsedQuery.fieldQueries.length > 0;

    if (hasAdvancedOperators) {
      console.error(`üîç Advanced operators: phrases=${parsedQuery.exactPhrases.length}, required=${parsedQuery.requiredTerms.length}, excluded=${parsedQuery.excludedTerms.length}, fields=${parsedQuery.fieldQueries.length}`);
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const searchTerms = [...parsedQuery.terms, ...parsedQuery.requiredTerms, ...parsedQuery.exactPhrases];
    const effectiveQuery = searchTerms.join(' ');

    let allResults: any[] = [];

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –±–µ–∑ –æ–±—ã—á–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
    if (hasAdvancedOperators && searchTerms.length === 0) {
      console.error(`üîß Using broad search for advanced operator filtering`);
      // –î–µ–ª–∞–µ–º —à–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∑–∞–º–µ—Ç–∫–∞–º, –∏—Å–ø–æ–ª—å–∑—É—è –ª—é–±–æ–µ –æ–±—â–µ–µ —Å–ª–æ–≤–æ
      const broadSearchTerms = ['readme', '—Å–∏—Å—Ç–µ–º–∞', 'gambit', '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', '—Ç–∑'];
      for (const broadTerm of broadSearchTerms) {
        const results = this.fuse.search(broadTerm);
        allResults.push(...results);
      }
      
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ —à–∏—Ä–æ–∫–∏–º –ø–æ–∏—Å–∫–æ–º, –±–µ—Ä–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
      if (allResults.length === 0) {
        allResults = this.indexData.map((note, index) => ({
          item: note,
          score: 0,
          refIndex: index
        }));
      }
    } else {
      // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞
      const expandedQueries = this.expandQueryWithSynonyms(effectiveQuery || query);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –∑–∞–ø—Ä–æ—Å–∞
      for (const searchQuery of expandedQueries) {
        const results = this.fuse.search(searchQuery);
        allResults.push(...results);
      }
    }

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const uniqueResults = new Map();
    for (const result of allResults) {
      const id = result.item.id;
      if (!uniqueResults.has(id) || result.score < uniqueResults.get(id).score) {
        uniqueResults.set(id, result);
      }
    }

    // üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø! –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞
    const MIN_SCORE_THRESHOLD = 0.35; // üéØ –§–ò–ù–ê–õ: —Ä–∞–∑—É–º–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª–Ω–æ—Ç—ã
    const highQualityResults = Array.from(uniqueResults.values())
      .filter((result: any) => {
        const score = result.score ?? 0; // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º undefined score –∫–∞–∫ 0 (–∏–¥–µ–∞–ª—å–Ω—ã–π)
        return score < MIN_SCORE_THRESHOLD;
      })
      .sort((a: any, b: any) => (a.score ?? 0) - (b.score ?? 0)) // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å undefined
      .slice(0, limit);
    
    console.error(`üéØ Quality filter: ${highQualityResults.length}/${uniqueResults.size} results passed (threshold: ${MIN_SCORE_THRESHOLD})`);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç SearchResult
    const searchResults: SearchResult[] = highQualityResults
      .map((result: any) => {
        const note = result.item as ObsidianNote;
        const score = result.score ?? 0; // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ undefined score
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        let type = 'fuse_match';
        let confidence = 'high';
        if (score > 0.3) confidence = 'medium'; // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π score
        if (score > 0.6) confidence = 'low';    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π score

        // üéØ HIGHLIGHTING –ò –£–ú–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê!
        const originalContent = note.content || '';
        const smartSnippet = this.extractRelevantSnippet(originalContent, query, 300);
        const highlightedSnippet = this.highlightMatches(smartSnippet, query);
        
        return {
          id: note.id || 'unknown',
          title: this.highlightMatches(note.title || 'Untitled', query), // üéØ Highlighting –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ!
          description: this.highlightMatches(note.description || '', query), // üéØ Highlighting –≤ –æ–ø–∏—Å–∞–Ω–∏–∏!
          path: note.path,
          lastModified: note.lastModified || '',
          score,
          type,
          content_preview: highlightedSnippet, // üéØ –£–º–Ω—ã–π snippet —Å highlighting!
          tags: note.tags,
          links: note.links,
          confidence
        };
      });

    console.error(`‚ú® Found ${searchResults.length} results with Fuse.js`);
    
    // üîç –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø–æ–∏—Å–∫–∞!
    let filteredResults = searchResults;
    if (hasAdvancedOperators) {
      filteredResults = this.filterByAdvancedQuery(searchResults, parsedQuery, this.indexData);
      console.error(`üîç Advanced filtering: ${filteredResults.length}/${searchResults.length} results passed`);
    }
    
    // üîó –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º!
    const enhancedResults = this.searchWithLinks(query, filteredResults, true);
    
    console.error(`üîó Enhanced with linked notes: ${enhancedResults.length} total results (${enhancedResults.length - filteredResults.length} linked notes added)`);
    
    // üìä –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏!
    const categorized = this.categorizeResults(enhancedResults);
    const finalResults = this.formatCategorizedResults(categorized, limit);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoryStats: string[] = [];
    for (const [category, results] of categorized) {
      if (results.length > 0) {
        categoryStats.push(`${category}: ${results.length}`);
      }
    }
    
    console.error(`üìä Results categorized: ${finalResults.length} total results. Categories: ${categoryStats.join(', ')}`);
    
    // üöÄ –°–û–•–†–ê–ù–Ø–ï–ú –í –ö–≠–® –î–õ–Ø –ë–£–î–£–©–ò–• –ó–ê–ü–†–û–°–û–í!
    this.setCachedResult(query, limit, finalResults);
    
    // üìä –ó–ê–ü–ò–°–´–í–ê–ï–ú –ê–ù–ê–õ–ò–¢–ò–ö–£ –ü–û–ò–°–ö–ê!
    const searchTime = Date.now() - searchStartTime;
    const linkedNotesCount = enhancedResults.length - filteredResults.length;
    this.recordSearchAnalytics(query, searchTime, finalResults.length, hasAdvancedOperators, linkedNotesCount, categorized);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –ø–æ–∏—Å–∫–æ–≤
    if (this.searchStats.totalSearches % 10 === 0) {
      console.error(`\n${this.getSearchStatistics()}\n`);
    }
    
    return finalResults;
  }

  // –ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ—Ç–∫—É –ø–æ ID –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  public getFullNoteContent(noteId: string): string | null {
    const note = this.getNote(noteId);
    if (!note || !note.fullPath) {
      return null;
    }

    try {
      // –ß–∏—Ç–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
      const fullContent = readFileSync(note.fullPath, 'utf-8');
      console.error(`üìÑ Successfully read full content for: ${note.title} (${fullContent.length} chars)`);
      return fullContent;
    } catch (error) {
      console.error(`‚ùå Error reading full content for ${noteId}:`, error);
      return note.content || note.content_preview || null;
    }
  }

  private getNote(noteId: string): ObsidianNote | null {
    return this.indexData.find(note => 
      note.id === noteId || 
      note.path === noteId || 
      note.title === noteId
    ) || null;
  }

  private _loadSynonyms(): Record<string, string[]> {
          return {
      "–∫–æ–¥": ["code", "script", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "–∏—Å—Ö–æ–¥–Ω–∏–∫"],
      "—Ñ—É–Ω–∫—Ü–∏—è": ["function", "–º–µ—Ç–æ–¥", "–ø—Ä–æ—Ü–µ–¥—É—Ä–∞"],
      "–∫–ª–∞—Å—Å": ["class", "–æ–±—ä–µ–∫—Ç", "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞"],
      "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è": ["variable", "var", "–∑–Ω–∞—á–µ–Ω–∏–µ"],
      "–º–∞—Å—Å–∏–≤": ["array", "—Å–ø–∏—Å–æ–∫", "–∫–æ–ª–ª–µ–∫—Ü–∏—è"],
      "–±–∞–∑–∞": ["database", "db", "–¥–∞–Ω–Ω—ã–µ", "storage"],
      "—Å–µ—Ä–≤–µ—Ä": ["server", "backend", "api"],
      "–∫–ª–∏–µ–Ω—Ç": ["client", "frontend", "ui"],
      "—Ç–µ—Å—Ç": ["test", "–ø—Ä–æ–≤–µ—Ä–∫–∞", "testing"],
      "–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è": ["documentation", "docs", "–æ–ø–∏—Å–∞–Ω–∏–µ"],
      "–æ—à–∏–±–∫–∞": ["error", "bug", "–ø—Ä–æ–±–ª–µ–º–∞", "–∏—Å–∫–ª—é—á–µ–Ω–∏–µ"],
      "–∫–æ–Ω—Ñ–∏–≥": ["config", "configuration", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"],
      "–º–æ–¥—É–ª—å": ["module", "–∫–æ–º–ø–æ–Ω–µ–Ω—Ç", "–±–∏–±–ª–∏–æ—Ç–µ–∫–∞"],
      "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å": ["interface", "api", "–∫–æ–Ω—Ç—Ä–∞–∫—Ç"],
      "typescript": ["ts", "javascript", "js"]
    };
  }

  private _initCategories(): Record<string, string[]> {
    return {
      "programming": ["–∫–æ–¥", "—Ñ—É–Ω–∫—Ü–∏—è", "–∫–ª–∞—Å—Å", "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è", "–º–∞—Å—Å–∏–≤"],
      "infrastructure": ["—Å–µ—Ä–≤–µ—Ä", "–±–∞–∑–∞", "–∫–æ–Ω—Ñ–∏–≥", "–º–æ–¥—É–ª—å"],
      "documentation": ["–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "–æ–ø–∏—Å–∞–Ω–∏–µ", "readme"],
      "testing": ["—Ç–µ—Å—Ç", "–ø—Ä–æ–≤–µ—Ä–∫–∞", "testing"]
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞
export function createServer() {
  console.error("üöÄ Creating new ObsidianMCPServer instance");
  console.error("üéØ PRODUCTION SEARCH CONFIGURATION:");
  console.error(`   üìä Default limit: ${DEFAULT_LIMIT} results (increased by user request)`);
  console.error(`   üîç Fuse.js threshold: 0.25 (balanced strictness)`);
  console.error(`   üéØ Quality threshold: 0.35 (good balance)`);
  console.error(`   üîó Linked notes: max 1 per result, only for score < 0.2`);
  console.error(`   üìù Min match length: 3 characters`);
  console.error(`   üìö Categories: shown in descriptions, clean format`);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Singleton pattern –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
  if (!serverInstance) {
    serverInstance = new ObsidianMCPServer();
    serverInstance.loadIndexSync(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
  } else {
    console.error("‚ôªÔ∏è  Reusing existing server instance");
  }

  const server = new Server({
    name: "obsidian-search",
    version: "2.0.0"
  }, {
    capabilities: {
      tools: {},
    }
  });

  server.setRequestHandler(ListToolsRequestSchema, async () => {
        return {
      tools: [
        {
          name: "search-notes",
          description: `üîç **–ò–î–ï–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö** –ø–æ –∑–∞–º–µ—Ç–∫–∞–º Obsidian —Å –º–æ—â–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:

üéØ **HIGHLIGHTING** - –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—é—Ç—Å—è –∂–∏—Ä–Ω—ã–º **—Ç–µ–∫—Å—Ç–æ–º**
üîó **–°–í–Ø–ó–ê–ù–ù–´–ï –ó–ê–ú–ï–¢–ö–ò** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏  
üîç **–†–ê–°–®–ò–†–ï–ù–ù–´–ï –û–ü–ï–†–ê–¢–û–†–´**:
  ‚Ä¢ "—Ç–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞" - –ø–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
  ‚Ä¢ +–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ - –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
  ‚Ä¢ -–∏—Å–∫–ª—é—á–∏—Ç—å —Å–ª–æ–≤–æ - –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
  ‚Ä¢ title:–∑–∞–≥–æ–ª–æ–≤–æ–∫ - –ø–æ–∏—Å–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
  ‚Ä¢ path:–ø—É—Ç—å - –ø–æ–∏—Å–∫ –ø–æ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞
  ‚Ä¢ tags:—Ç–µ–≥ - –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º
  ‚Ä¢ content:—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ - –ø–æ–∏—Å–∫ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º

üìä **–ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø** - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è –ø–æ —Ç–∏–ø–∞–º:
  üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è, üìã –¢–ó, üíª –ö–æ–¥, üéì –û–±—É—á–µ–Ω–∏–µ, ‚úÖ TODO –∏ –¥—Ä.

‚ö° **–£–ú–ù–û–ï –ö–≠–®–ò–†–û–í–ê–ù–ò–ï** - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
üß† **FUZZY SEARCH** - –Ω–∞—Ö–æ–¥–∏—Ç –¥–∞–∂–µ –ø—Ä–∏ –æ–ø–µ—á–∞—Ç–∫–∞—Ö  
üìà **–ê–ù–ê–õ–ò–¢–ò–ö–ê** - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
- javascript –∫–æ–¥
- "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ" +gambit -—Å—Ç–∞—Ä—ã–π  
- title:readme path:docs
- —Ñ—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–∏–≤ –±–∞–∑–∞

–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∏–Ω–æ–Ω–∏–º–æ–≤.`,
          inputSchema: {
            type: "object",
            properties: {
              libraryName: {
                type: "string",
                description: "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–º–µ—Ç–∫–∞—Ö Obsidian. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: \"—Ç–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞\", +–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ, -–∏—Å–∫–ª—é—á–∏—Ç—å, field:value"
              }
            },
            required: ["libraryName"]
          }
        },
        {
          name: "get-note-content",
          description: `üìÑ –ü–æ–ª—É—á–∏—Ç—å **–ü–û–õ–ù–û–ï –°–û–î–ï–†–ñ–ò–ú–û–ï** –∑–∞–º–µ—Ç–∫–∏ –ø–æ –µ—ë ID, –ø—É—Ç–∏ –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫—É. 

–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–∞–±–æ—Ç—ã —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.

**–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
- ID –∑–∞–º–µ—Ç–∫–∏ (–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞)
- –ü—É—Ç—å –∫ –∑–∞–º–µ—Ç–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è/readme.md") 
- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏

**–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:**
- –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –≤ markdown —Ñ–æ—Ä–º–∞—Ç–µ
- –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–º–µ—Ç–∫–µ`,
          inputSchema: {
            type: "object", 
            properties: {
              context7CompatibleLibraryID: {
                type: "string",
                description: "ID –∑–∞–º–µ—Ç–∫–∏, –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"
              },
              tokens: {
                type: "number",
                description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)"
              },
              topic: {
                type: "string", 
                description: "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–º–µ—Ç–∫–∏"
              }
            },
            required: ["context7CompatibleLibraryID"]
          }
        }
      ]
    };
  });

  server.setRequestHandler(CallToolRequestSchema, async (request) => {
    if (request.params.name === "search-notes") {
      const query = request.params.arguments?.libraryName as string;
      if (!query) {
        throw new Error("Missing required parameter: libraryName");
      }

      const results = serverInstance!.searchNotes(query);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const formattedContent = results.length > 0 ? 
        `üìö **Obsidian Notes Search Results**

Query: "${query}"
Total Results: ${results.length}

üåü **Found ${results.length} relevant notes:**

${results.map((result, index) => {
  const emoji = result.type === 'linked_note' ? 'üîó' : 
                result.type === 'category_header' ? 'üìÇ' : 'üìÑ';
  
  return `**${index + 1}. ${result.title}** (Score: ${result.score.toFixed(3)})
üìÅ Path: \`${result.path}\`
üïí Modified: ${result.lastModified}
üîé Type: ${result.type} (${result.confidence})
üìÑ Preview:
\`\`\`
${result.content_preview}
\`\`\`

---

`;
}).join('')}` : 
        `‚ùå **No results found** for query: "${query}"
        
Try:
- Different keywords or synonyms
- Broader search terms  
- Check spelling
- Use advanced operators like "exact phrase" or +required -excluded`;

        return {
          content: [
            {
              type: "text",
            text: formattedContent
          }
        ]
      };
    }

    if (request.params.name === "get-note-content") {
      const noteId = request.params.arguments?.context7CompatibleLibraryID as string;
      const maxTokens = request.params.arguments?.tokens as number;
      const topic = request.params.arguments?.topic as string;

      if (!noteId) {
        throw new Error("Missing required parameter: context7CompatibleLibraryID");
      }

      const fullContent = serverInstance!.getFullNoteContent(noteId);
      
      if (!fullContent) {
          return {
            content: [
              {
                type: "text",
              text: `‚ùå **Note not found**: "${noteId}"
              
Please check:
- Note ID is correct
- File path exists
- Note is indexed in the system`
            }
          ]
        };
      }

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
      let content = fullContent;
      if (maxTokens && maxTokens > 0) {
        const approximateTokens = content.length / 4; // –ü—Ä–∏–º–µ—Ä–Ω–æ 4 —Å–∏–º–≤–æ–ª–∞ = 1 —Ç–æ–∫–µ–Ω
        if (approximateTokens > maxTokens) {
          content = content.substring(0, maxTokens * 4) + '\n\n... (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—Ä–µ–∑–∞–Ω–æ –ø–æ –ª–∏–º–∏—Ç—É —Ç–æ–∫–µ–Ω–æ–≤)';
        }
      }

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Ç–µ–º–∞, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
      if (topic) {
        const lines = content.split('\n');
          const topicLower = topic.toLowerCase();
        const relevantSections: string[] = [];
          
        for (let i = 0; i < lines.length; i++) {
          const line = lines[i];
            if (line.toLowerCase().includes(topicLower)) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç: 3 —Å—Ç—Ä–æ–∫–∏ –¥–æ –∏ 5 —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ
            const start = Math.max(0, i - 3);
            const end = Math.min(lines.length, i + 6);
            const section = lines.slice(start, end).join('\n');
            relevantSections.push(section);
          }
        }
        
        if (relevantSections.length > 0) {
          content = `üìç **Sections related to "${topic}":**\n\n` + 
                   relevantSections.join('\n\n---\n\n') + 
                   '\n\nüìÑ **Full content below:**\n\n' + content;
        }
      }

        return {
          content: [
            {
              type: "text",
            text: `üìÑ **FULL CONTENT** of note: "${noteId}"

${content}`
          }
        ]
      };
    }

    throw new Error(`Unknown tool: ${request.params.name}`);
  });

  return server;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function main() {
  // üöÄ –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï –ü–†–ò –ó–ê–ü–£–°–ö–ï
  console.error("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
  console.error("üöÄ OBSIDIAN MCP SERVER STARTING UP");
  console.error("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
  console.error(`üìÖ Timestamp: ${new Date().toISOString()}`);
  console.error(`üîß Node.js version: ${process.version}`);
  console.error(`üìÅ Working directory: ${process.cwd()}`);
  console.error(`üõ†Ô∏è Script location: ${__filename}`);
  console.error(`üîç Plugin root: ${PLUGIN_ROOT}`);
  console.error("---------------------------------------------------------------");
  
  const server = createServer();
  const transport = new StdioServerTransport();
  
  console.error("üîå Connecting to MCP transport...");
  await server.connect(transport);
  
  console.error("‚úÖ SERVER SUCCESSFULLY STARTED!");
  console.error("üîç Obsidian Notes MCP Server running on stdio");
  console.error("üéØ Ready to receive search requests...");
  console.error("üéØ PRODUCTION MODE: Advanced search operators now working!");
  console.error(`üìÖ Build: v2.6.0-advanced-search (${new Date().toLocaleDateString()})`);
  console.error("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
}

main().catch((error) => {
  console.error("Fatal error in main():", error);
  process.exit(1);
});
