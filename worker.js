/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/


// src/indexer.worker.ts
self.onmessage = async (event) => {
  const { type, files, model, mcpPort } = event.data;
  if (type === "start") {
    try {
      self.postMessage({ type: "log", message: "Starting indexing using existing index.json (no vectorization)..." });
      const indexedFiles = [];
      const total = files.length;
      for (let i = 0; i < total; i++) {
        const file = files[i];
        try {
          indexedFiles.push({
            path: file.path,
            content_preview: file.content.slice(0, 300) + "...",
            vector: []
            // No vectorization needed - empty array
          });
          self.postMessage({ type: "progress", processed: i + 1, total });
        } catch (error) {
          self.postMessage({
            type: "log",
            message: `Failed to process ${file.path}: ${error.message}`
          });
          continue;
        }
      }
      self.postMessage({ type: "result", indexedFiles });
    } catch (error) {
      self.postMessage({
        type: "error",
        error: {
          message: error.message,
          stack: error.stack,
          name: error.name
        }
      });
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL2luZGV4ZXIud29ya2VyLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBJbmRleGVkRmlsZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5zZWxmLm9ubWVzc2FnZSA9IGFzeW5jIChldmVudDogTWVzc2FnZUV2ZW50KSA9PiB7XG4gICAgY29uc3QgeyB0eXBlLCBmaWxlcywgbW9kZWwsIG1jcFBvcnQgfSA9IGV2ZW50LmRhdGE7XG5cbiAgICBpZiAodHlwZSA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7IHR5cGU6ICdsb2cnLCBtZXNzYWdlOiAnU3RhcnRpbmcgaW5kZXhpbmcgdXNpbmcgZXhpc3RpbmcgaW5kZXguanNvbiAobm8gdmVjdG9yaXphdGlvbikuLi4nIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBpbmRleGVkRmlsZXM6IEluZGV4ZWRGaWxlW10gPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsID0gZmlsZXMubGVuZ3RoO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0gZmlsZXNbaV07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2tpcCB2ZWN0b3JpemF0aW9uIHNpbmNlIHdlIHVzZSBleGlzdGluZyBpbmRleC5qc29uXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBuZXcgVHlwZVNjcmlwdCBNQ1Agc2VydmVyIHJlYWRzIGZyb20gaW5kZXguanNvbiBkaXJlY3RseVxuICAgICAgICAgICAgICAgICAgICBpbmRleGVkRmlsZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBmaWxlLnBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50X3ByZXZpZXc6IGZpbGUuY29udGVudC5zbGljZSgwLCAzMDApICsgJy4uLicsXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3I6IFtdLCAvLyBObyB2ZWN0b3JpemF0aW9uIG5lZWRlZCAtIGVtcHR5IGFycmF5XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHNlbGYucG9zdE1lc3NhZ2UoeyB0eXBlOiAncHJvZ3Jlc3MnLCBwcm9jZXNzZWQ6IGkgKyAxLCB0b3RhbCB9KTtcblxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYucG9zdE1lc3NhZ2UoeyBcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdsb2cnLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBGYWlsZWQgdG8gcHJvY2VzcyAke2ZpbGUucGF0aH06ICR7ZXJyb3IubWVzc2FnZX1gIFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ29udGludWUgd2l0aCBuZXh0IGZpbGUgaW5zdGVhZCBvZiBmYWlsaW5nIGNvbXBsZXRlbHlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKHsgdHlwZTogJ3Jlc3VsdCcsIGluZGV4ZWRGaWxlcyB9KTtcblxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICBlcnJvcjoge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICBzdGFjazogZXJyb3Iuc3RhY2ssXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGVycm9yLm5hbWUsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59OyJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7QUFFQSxLQUFLLFlBQVksT0FBTyxVQUF3QjtBQUM1QyxRQUFNLEVBQUUsTUFBTSxPQUFPLE9BQU8sUUFBUSxJQUFJLE1BQU07QUFFOUMsTUFBSSxTQUFTLFNBQVM7QUFDbEIsUUFBSTtBQUNBLFdBQUssWUFBWSxFQUFFLE1BQU0sT0FBTyxTQUFTLG9FQUFvRSxDQUFDO0FBRTlHLFlBQU0sZUFBOEIsQ0FBQztBQUNyQyxZQUFNLFFBQVEsTUFBTTtBQUVwQixlQUFTLElBQUksR0FBRyxJQUFJLE9BQU8sS0FBSztBQUM1QixjQUFNLE9BQU8sTUFBTSxDQUFDO0FBRXBCLFlBQUk7QUFHQSx1QkFBYSxLQUFLO0FBQUEsWUFDZCxNQUFNLEtBQUs7QUFBQSxZQUNYLGlCQUFpQixLQUFLLFFBQVEsTUFBTSxHQUFHLEdBQUcsSUFBSTtBQUFBLFlBQzlDLFFBQVEsQ0FBQztBQUFBO0FBQUEsVUFDYixDQUFDO0FBRUQsZUFBSyxZQUFZLEVBQUUsTUFBTSxZQUFZLFdBQVcsSUFBSSxHQUFHLE1BQU0sQ0FBQztBQUFBLFFBRWxFLFNBQVMsT0FBUDtBQUNFLGVBQUssWUFBWTtBQUFBLFlBQ2IsTUFBTTtBQUFBLFlBQ04sU0FBUyxxQkFBcUIsS0FBSyxTQUFTLE1BQU07QUFBQSxVQUN0RCxDQUFDO0FBRUQ7QUFBQSxRQUNKO0FBQUEsTUFDSjtBQUVBLFdBQUssWUFBWSxFQUFFLE1BQU0sVUFBVSxhQUFhLENBQUM7QUFBQSxJQUVyRCxTQUFTLE9BQVA7QUFDRSxXQUFLLFlBQVk7QUFBQSxRQUNiLE1BQU07QUFBQSxRQUNOLE9BQU87QUFBQSxVQUNILFNBQVMsTUFBTTtBQUFBLFVBQ2YsT0FBTyxNQUFNO0FBQUEsVUFDYixNQUFNLE1BQU07QUFBQSxRQUNoQjtBQUFBLE1BQ0osQ0FBQztBQUFBLElBQ0w7QUFBQSxFQUNKO0FBQ0o7IiwKICAibmFtZXMiOiBbXQp9Cg==
