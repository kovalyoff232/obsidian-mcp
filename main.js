/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/types.ts
var DEFAULT_SETTINGS = {
  mcp_port: 3030,
  python_path: "python3",
  embedding_model: "all-MiniLM-L6-v2",
  excluded_folders: [
    ".git",
    "node_modules",
    "dist",
    "build",
    ".venv",
    "venv",
    ".obsidian/plugins/obsidian-mcp-plugin/.venv",
    ".obsidian/plugins/obsidian-mcp-plugin/venv",
    ".obsidian/plugins/obsidian-mcp-plugin/node_modules",
    ".obsidian/plugins/obsidian-mcp-plugin/dist",
    ".obsidian/plugins/obsidian-mcp-plugin/models",
    ".obsidian/plugins/obsidian-mcp-plugin/onnx",
    ".obsidian/plugins/obsidian-mcp-plugin/openvino"
  ],
  search_default_mode: "balanced",
  search_include_linked_default: true,
  search_limit_default: 20
};

// src/settings.ts
var import_obsidian = require("obsidian");
var MCPSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    __publicField(this, "plugin");
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "MCP Settings" });
    new import_obsidian.Setting(containerEl).setName("MCP Server Port").setDesc("The port for the MCP server.").addText((text) => text.setPlaceholder("e.g. 3030").setValue(this.plugin.settings.mcp_port.toString()).onChange(async (value) => {
      this.plugin.settings.mcp_port = Number(value);
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Python Path").setDesc("The path to the Python executable.").addText((text) => text.setPlaceholder("e.g. /usr/bin/python3").setValue(this.plugin.settings.python_path).onChange(async (value) => {
      this.plugin.settings.python_path = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Embedding Model").setDesc("The model to use for vectorization.").addDropdown((dropdown) => dropdown.addOption("all-MiniLM-L6-v2", "all-MiniLM-L6-v2").setValue(this.plugin.settings.embedding_model).onChange(async (value) => {
      this.plugin.settings.embedding_model = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Excluded Folders").setDesc("Folders to exclude from indexing (one per line).").addTextArea((text) => text.setPlaceholder("e.g. private/\ntemplates/").setValue(this.plugin.settings.excluded_folders.join("\n")).onChange(async (value) => {
      this.plugin.settings.excluded_folders = value.split("\n").map((v) => v.trim()).filter((v) => v);
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Search default mode").setDesc("Fuse ranking profile: balanced or taxonomy").addDropdown((drop) => drop.addOption("balanced", "balanced").addOption("taxonomy", "taxonomy").addOption("semantic", "semantic").setValue(this.plugin.settings.search_default_mode || "balanced").onChange(async (value) => {
      this.plugin.settings.search_default_mode = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Include linked notes by default").setDesc("When enabled, search results may include linked notes").addToggle((toggle) => toggle.setValue(this.plugin.settings.search_include_linked_default ?? true).onChange(async (value) => {
      this.plugin.settings.search_include_linked_default = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default search limit").setDesc("How many items to return by default").addText((text) => text.setPlaceholder("e.g. 20").setValue(String(this.plugin.settings.search_limit_default ?? 20)).onChange(async (value) => {
      const n = Number(value);
      this.plugin.settings.search_limit_default = isNaN(n) ? 20 : n;
      await this.plugin.saveSettings();
    }));
  }
};

// src/mcp_server.ts
var import_child_process = require("child_process");
var fs = __toESM(require("fs"), 1);
var import_path = require("path");
var MCPServer = class {
  constructor(plugin) {
    __publicField(this, "process", null);
    __publicField(this, "status", "stopped");
    __publicField(this, "plugin");
    this.plugin = plugin;
  }
  get Status() {
    return this.status;
  }
  async start() {
    console.log("[MCP Server]: Attempting to start server...");
    try {
      const settings = this.plugin.settings;
      const adapter = this.plugin.app.vault.adapter;
      const pluginDir = this.plugin.manifest.dir || "obsidian-mcp-plugin";
      const manifestPath = await adapter.getResourcePath(
        `${pluginDir}/manifest.json`
      );
      const rawPath = manifestPath.replace(
        /app:\/\/local|app:\/\/[a-zA-Z0-9-]+/,
        ""
      );
      const pluginPath = (0, import_path.dirname)(decodeURIComponent(rawPath));
      console.log(`[MCP Server]: Plugin path: ${pluginPath}`);
      const serverPath = (0, import_path.normalize)(`${pluginPath}/dist/mcp_server.js`);
      const nodePath = "node";
      console.log(
        `[MCP Server]: Attempting to start server with node.js`
      );
      console.log(`[MCP Server]: Server script path: ${serverPath}`);
      if (!fs.existsSync(serverPath)) {
        console.error(
          `[MCP Server ERROR]: Server script path does not exist: ${serverPath}`
        );
        console.error(
          `[MCP Server INFO]: Run 'npm run build:mcp' to build the server`
        );
        this.status = "error";
        return;
      }
      this.process = (0, import_child_process.spawn)(nodePath, [
        serverPath,
        "--transport",
        "stdio"
      ]);
      this.status = "running";
      this.process.stdout?.on("data", (data) => {
        console.log(`[MCP Server]: ${data}`);
      });
      this.process.stderr?.on("data", (data) => {
        this.status = "error";
        console.error(`[MCP Server ERROR]: ${data}`);
      });
      this.process.on("close", (code) => {
        this.status = "stopped";
        console.log(`[MCP Server]: Process exited with code ${code}`);
      });
    } catch (e) {
      console.error("[MCP Server CATCH]:", e);
      this.status = "error";
    }
  }
  stop() {
    if (this.process) {
      this.process.kill();
      this.process = null;
      this.status = "stopped";
      console.log("[MCP Server]: Stopped");
    }
  }
  restart() {
    this.stop();
    this.start();
  }
};

// src/indexer.ts
var Indexer = class {
  constructor(plugin, modelsPath) {
    __publicField(this, "plugin");
    __publicField(this, "worker", null);
    __publicField(this, "isIndexing", false);
    __publicField(this, "modelsPath");
    this.plugin = plugin;
    this.modelsPath = modelsPath;
  }
  async startIndexing() {
    if (this.isIndexing) {
      this.plugin.indexingView?.addLog("Indexing is already in progress.");
      return;
    }
    this.isIndexing = true;
    this.plugin.indexingView?.onIndexingStart();
    const pluginRelativePath = this.plugin.manifest.dir;
    if (!pluginRelativePath) {
      const errorMessage = "Plugin directory is not available. Cannot start indexing.";
      this.plugin.indexingView?.addLog(`[Indexer ERROR]: ${errorMessage}`);
      this.stopIndexing();
      return;
    }
    const pluginRootUrl = this.plugin.app.vault.adapter.getResourcePath(pluginRelativePath);
    this.plugin.indexingView?.addLog(`Plugin root URL for worker: ${pluginRootUrl}`);
    this.worker = new Worker(this.plugin.workerUrl, { type: "module" });
    this.worker.onmessage = async (event) => {
      const { type, message, processed, total, indexedFiles, error } = event.data;
      switch (type) {
        case "log":
          this.plugin.indexingView?.addLog(`[Indexer Worker]: ${message}`);
          break;
        case "progress":
          this.plugin.indexingView?.updateProgress(processed, total);
          break;
        case "result":
          await this.saveIndex(indexedFiles);
          this.plugin.indexingView?.addLog("Indexing finished successfully.");
          this.stopIndexing();
          break;
        case "error":
          this.plugin.indexingView?.addLog(`[Indexer Worker ERROR]: ${error.message}
${error.stack}`);
          this.stopIndexing();
          break;
      }
    };
    this.worker.onerror = (event) => {
      event.preventDefault();
      const errorMessage = event.message || "An unknown error occurred";
      this.plugin.indexingView?.addLog(`[Indexer Worker ERROR]: ${errorMessage}`);
      console.error("Full error event:", event);
      this.stopIndexing();
    };
    const filesToIndex = await this.prepareFiles();
    this.worker.postMessage({
      type: "start",
      files: filesToIndex,
      model: this.plugin.settings.embedding_model,
      mcpPort: this.plugin.settings.mcp_port
      // Передаем порт MCP-сервера
    });
  }
  // ВОТ ЭТОТ МЕТОД БЫЛ ПОТЕРЯН. Я ЕГО ВЕРНУЛ.
  stopIndexing() {
    if (this.worker) {
      this.worker.terminate();
      this.worker = null;
    }
    this.isIndexing = false;
    this.plugin.indexingView?.onIndexingStop();
  }
  async prepareFiles() {
    const files = this.plugin.app.vault.getMarkdownFiles();
    const excludedFolders = this.plugin.settings.excluded_folders;
    const defaultExcludes = [
      ".obsidian/",
      "node_modules/",
      ".venv/",
      "venv/",
      "dist/",
      "build/"
    ];
    const filesToProcess = files.filter((file) => {
      const p = file.path;
      if (defaultExcludes.some((pref) => p.startsWith(pref) || p.includes("/" + pref)))
        return false;
      if (excludedFolders.some((folder) => p.startsWith(folder)))
        return false;
      return true;
    });
    const fileContents = await Promise.all(
      filesToProcess.map(async (file) => ({
        path: file.path,
        content: await this.plugin.app.vault.cachedRead(file)
      }))
    );
    return fileContents;
  }
  async saveIndex(indexedFiles) {
    const indexPath = `${this.plugin.app.vault.configDir}/plugins/obsidian-mcp-plugin/index.json`;
    await this.plugin.app.vault.adapter.write(indexPath, JSON.stringify(indexedFiles, null, 2));
  }
};

// src/indexing_view.ts
var import_obsidian2 = require("obsidian");
var INDEXING_VIEW_TYPE = "mcp-indexing-view";
var IndexingView = class extends import_obsidian2.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    __publicField(this, "plugin");
    __publicField(this, "logContainer");
    __publicField(this, "progressBar");
    this.plugin = plugin;
  }
  getViewType() {
    return INDEXING_VIEW_TYPE;
  }
  getDisplayText() {
    return "MCP Indexing";
  }
  async onOpen() {
    const container = this.contentEl;
    container.empty();
    container.createEl("h2", { text: "MCP Indexing Status" });
    const statusSection = container.createDiv();
    statusSection.createEl("h3", { text: "Status" });
    const controlsSection = container.createDiv();
    controlsSection.createEl("h3", { text: "Controls" });
    const startButton = controlsSection.createEl("button", { text: "Start Indexing" });
    const stopButton = controlsSection.createEl("button", { text: "Stop Indexing", attr: { disabled: "true" } });
    const restartServerButton = controlsSection.createEl("button", { text: "Restart MCP Server" });
    startButton.onClickEvent(() => this.plugin.indexer.startIndexing());
    stopButton.onClickEvent(() => this.plugin.indexer.stopIndexing());
    restartServerButton.onClickEvent(() => this.plugin.mcpServer.restart());
    const progressSection = container.createDiv();
    progressSection.createEl("h3", { text: "Progress" });
    this.progressBar = progressSection.createEl("progress");
    this.progressBar.style.width = "100%";
    const logsSection = container.createDiv();
    logsSection.createEl("h3", { text: "Logs" });
    this.logContainer = logsSection.createEl("div", { cls: "mcp-log-container" });
  }
  addLog(message) {
    const logLine = this.logContainer.createEl("div", { text: message });
    this.logContainer.scrollTop = this.logContainer.scrollHeight;
  }
  updateProgress(processed, total) {
    this.progressBar.max = total;
    this.progressBar.value = processed;
  }
  onIndexingStart() {
    this.containerEl.querySelector('button[text="Start Indexing"]')?.setAttribute("disabled", "true");
    this.containerEl.querySelector('button[text="Stop Indexing"]')?.removeAttribute("disabled");
  }
  onIndexingStop() {
    this.containerEl.querySelector('button[text="Start Indexing"]')?.removeAttribute("disabled");
    this.containerEl.querySelector('button[text="Stop Indexing"]')?.setAttribute("disabled", "true");
    this.progressBar.value = 0;
  }
};

// src/main.ts
var MyPlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    __publicField(this, "settings");
    __publicField(this, "mcpServer");
    __publicField(this, "indexer");
    __publicField(this, "indexingView");
    __publicField(this, "workerUrl");
  }
  async onload() {
    await this.loadSettings();
    const workerPath = `${this.manifest.dir}/worker.js`;
    const workerBlob = new Blob([await this.app.vault.adapter.read(workerPath)], { type: "text/javascript" });
    this.workerUrl = URL.createObjectURL(workerBlob);
    this.mcpServer = new MCPServer(this);
    const modelsPath = `${this.manifest.dir}/models`;
    this.indexer = new Indexer(this, modelsPath);
    this.addSettingTab(new MCPSettingsTab(this.app, this));
    this.registerView(
      INDEXING_VIEW_TYPE,
      (leaf) => this.indexingView = new IndexingView(leaf, this)
    );
    this.addRibbonIcon("brain-circuit", "Activate MCP Indexing View", () => {
      this.activateView();
    });
    this.addCommand({
      id: "start-indexing",
      name: "Start Indexing",
      callback: () => {
        this.indexer.startIndexing();
      }
    });
    await this.setupPythonEnvironment();
    await this.mcpServer.start();
  }
  onunload() {
    this.mcpServer.stop();
    if (this.indexingView) {
      this.indexingView.leaf.detach();
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async setupPythonEnvironment() {
  }
  async activateView() {
    this.app.workspace.detachLeavesOfType(INDEXING_VIEW_TYPE);
    const leaf = this.app.workspace.getRightLeaf(false);
    if (leaf) {
      await leaf.setViewState({
        type: INDEXING_VIEW_TYPE,
        active: true
      });
      this.app.workspace.revealLeaf(leaf);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
